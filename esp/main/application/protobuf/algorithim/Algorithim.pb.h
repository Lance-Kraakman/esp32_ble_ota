/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_ALGORITHIM_PB_H_INCLUDED
#define PB_ALGORITHIM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _AlgorithimType
{
    AlgorithimType_INTERVAL = 0,
    AlgorithimType_TIMED = 1
} AlgorithimType;

/* Struct definitions */
typedef struct _Exercise
{
    uint32_t id;
} Exercise;

typedef struct _RollingAlgorithim
{
    char dummy_field;
} RollingAlgorithim;

typedef struct _AlgorithimConfiguration
{
    pb_size_t which_algorithim;
    union
    {
        RollingAlgorithim rolling;
    } algorithim;
} AlgorithimConfiguration;

#ifdef __cplusplus
extern "C"
{
#endif

/* Helper constants for enums */
#define _AlgorithimType_MIN AlgorithimType_INTERVAL
#define _AlgorithimType_MAX AlgorithimType_TIMED
#define _AlgorithimType_ARRAYSIZE ((AlgorithimType)(AlgorithimType_TIMED + 1))

/* Initializer values for message structs */
#define Exercise_init_default \
    {                         \
        0                     \
    }
#define RollingAlgorithim_init_default \
    {                                  \
        0                              \
    }
#define AlgorithimConfiguration_init_default \
    {                                        \
        0,                                   \
        {                                    \
            RollingAlgorithim_init_default   \
        }                                    \
    }
#define Exercise_init_zero \
    {                      \
        0                  \
    }
#define RollingAlgorithim_init_zero \
    {                               \
        0                           \
    }
#define AlgorithimConfiguration_init_zero \
    {                                     \
        0,                                \
        {                                 \
            RollingAlgorithim_init_zero   \
        }                                 \
    }

/* Field tags (for use in manual encoding/decoding) */
#define Exercise_id_tag 1
#define AlgorithimConfiguration_rolling_tag 1

/* Struct field encoding specification for nanopb */
#define Exercise_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT32, id, 1)
#define Exercise_CALLBACK NULL
#define Exercise_DEFAULT NULL

#define RollingAlgorithim_FIELDLIST(X, a)

#define RollingAlgorithim_CALLBACK NULL
#define RollingAlgorithim_DEFAULT NULL

#define AlgorithimConfiguration_FIELDLIST(X, a) \
    X(a, STATIC, ONEOF, MESSAGE, (algorithim, rolling, algorithim.rolling), 1)
#define AlgorithimConfiguration_CALLBACK NULL
#define AlgorithimConfiguration_DEFAULT NULL
#define AlgorithimConfiguration_algorithim_rolling_MSGTYPE RollingAlgorithim

    extern const pb_msgdesc_t Exercise_msg;
    extern const pb_msgdesc_t RollingAlgorithim_msg;
    extern const pb_msgdesc_t AlgorithimConfiguration_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Exercise_fields &Exercise_msg
#define RollingAlgorithim_fields &RollingAlgorithim_msg
#define AlgorithimConfiguration_fields &AlgorithimConfiguration_msg

/* Maximum encoded size of messages (where known) */
#define AlgorithimConfiguration_size 2
#define Exercise_size 6
#define RollingAlgorithim_size 0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
